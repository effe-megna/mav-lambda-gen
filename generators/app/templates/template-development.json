{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Transform": "AWS::Serverless-2016-10-31",
    "Parameters" : {
        "ApiId" : {
            "Type" : "String",
            "Default" : "4a0p76cat4",
            "Description" : "The id of the Api Gateway REST API resource"
        },
        "ApiRootResourceId" : {
          "Type" : "String",
          "Default" : "yq6hmd0k5b",
          "Description" : "The id of the Api Gateway root resource"
        },
        "ApiValidatorBodyParametersId" : {
            "Type" : "String",
            "Default" : "6sacqn",
            "Description" : "Validate body, query string parameters, and headers"
        },
        "ApiValidatorBodyId" : {
            "Type" : "String",
            "Default" : "d3auni",
            "Description" : "Validate body"
        },
        "ApiValidatorParametersId" : {
            "Type" : "String",
            "Default" : "fhei3q",
            "Description" : "Validate query string parameters and headers"
        },
        "VpcPrivateSubnet1" : {
            "Type" : "String",
            "Default" : "subnet-0a883142",
            "Description" : "Private VPC subnet 1"
        },
        "VpcPrivateSubnet2" : {
            "Type" : "String",
            "Default" : "subnet-f125ceab",
            "Description" : "Private VPC subnet 2"
        },
        "VpcPublicSubnet1" : {
            "Type" : "String",
            "Default" : "subnet-78c8621e",
            "Description" : "Public VPC subnet 1"
        },
        "VpcPublicSubnet2" : {
            "Type" : "String",
            "Default" : "subnet-d8897c82",
            "Description" : "Public VPC subnet 2"
        },
        "VpcPrivateSecurityGroup" : {
            "Type" : "String",
            "Default" : "sg-ebb43296",
            "Description" : "Private VPC security group"
        },
        "VpcPublicSecurityGroup" : {
            "Type" : "String",
            "Default" : "sg-535cda2e",
            "Description" : "Public VPC security group"
        }
    },
    "Resources": {
        "apiGatewayResource": {
            "Type" : "AWS::ApiGateway::Resource",
            "Properties" : {
                "ParentId" : {"Ref": "ApiRootResourceId"},
                "PathPart" : "<%= newApiEndpoint %>",
                "RestApiId" : {"Ref": "ApiId"}
            }
        },
        "optionsMethod": {
            "Type" : "AWS::ApiGateway::Method",
            "Properties" : {
                "ApiKeyRequired" : false,
                "HttpMethod" : "OPTIONS",
                "AuthorizationType" : "NONE",
                "Integration": {
                    "Type": "MOCK",
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    },
                    "IntegrationResponses": [{
                        "ResponseParameters" : {
                            "method.response.header.Access-Control-Allow-Headers" : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-cognito-access-token'",
                            "method.response.header.Access-Control-Allow-Methods" : "'<=% newApiMethod %>,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin" : "'*'"
                        },
                        "StatusCode" : "200"
                    }]
                },
                "MethodResponses": [{
                    "ResponseParameters" : {
                        "method.response.header.Access-Control-Allow-Headers" : true,
                        "method.response.header.Access-Control-Allow-Methods" : true,
                        "method.response.header.Access-Control-Allow-Origin" : true
                    },
                    "StatusCode" : "200"
                }],
                "OperationName" : "optionsMethod",
                "ResourceId" : {"Ref": "apiGatewayResource"},
                "RestApiId" : {"Ref": "ApiId"}
            }
        },
        "resourceMethod": {
            "Type" : "AWS::ApiGateway::Method",
            "Properties" : {
                "ApiKeyRequired" : true,
                "AuthorizationScopes" : [],
                "AuthorizationType" : "COGNITO_USER_POOLS",
                "AuthorizerId" : "isgbmr",
                "HttpMethod" : "<%= newApiMethod %>",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { "Fn::Sub":["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}:${Alias}/invocations",{"Alias": "${stageVariables.lambdaAlias}"}]}
                },
                "MethodResponses": [{
                    "ResponseParameters" : {
                        "method.response.header.Access-Control-Allow-Origin" : true
                    },
                    "StatusCode" : "200"
                },{
                    "ResponseParameters" : {
                        "method.response.header.Access-Control-Allow-Origin" : true
                    },
                    "StatusCode" : "500"
                }],
                "OperationName" : "resourceMethod",
                "RequestParameters": {
                    "method.request.header.Accept-Language": true
                },
                "RequestValidatorId": {"Ref": "ApiValidatorParametersId"},
                "ResourceId" : {"Ref": "apiGatewayResource"},
                "RestApiId" : {"Ref": "ApiId"}
            }
        },
        "lambdaFunction": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "FunctionName": "<%= newLambdaName %>",
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "CodeUri": "./dist",
                "Role": {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/becharge_uservices"},
                "Description": "<%= newDescription %>",
                "Timeout": 3,
                "VpcConfig": {
                    "SecurityGroupIds" : [ {"Ref": "VpcPrivateSecurityGroup"} ],
                    "SubnetIds" : [ {"Ref": "VpcPrivateSubnet1"}, {"Ref": "VpcPrivateSubnet2"} ]
                },
                "ReservedConcurrentExecutions": 20,
                "Environment": {
                    "Variables": {
                        "CONFIGURATION_VERSION": "1",
                        "TRANSLATIONS_VERSION": "1"
                    }
                },
                "Tags": {
                    "Project": "bepower"
                }
            }
        },
        "lambdaFunctionAliasDevelopment": {
            "Type" : "AWS::Lambda::Alias",
            "Properties" : {
              "FunctionName" : { "Ref" : "lambdaFunction" },
              "FunctionVersion" : "$LATEST",
              "Name" : "development"
            }
        },
        "lambdaFunctionAliasDevelopmentInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": ["lambdaFunction","lambdaFunctionAliasDevelopment"],
            "Properties": {
                "FunctionName": {"Fn::Join": [":", [{"Fn::GetAtt": ["lambdaFunction","Arn"]},"development"]]},
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {"Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/<%= newApiMethod %>/<%= newApiEndpoint %>"}
            }
        }
    }
}